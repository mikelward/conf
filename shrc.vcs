# Version control additions to .shrc.

# Cache of version control system used by a given directory.
declare -A vcs
declare -A rootdir

# print the name of the version control system in use in $PWD
# TODO: implement in terms of rootdir
vcs() {
    # If it's not writable, assume we don't care about vcs here.
    test -w "$PWD" || return 1

    local _vcs _rootdir
    if test -f .vcs_cache; then
        read _vcs _rootdir <.vcs_cache
    else
        read _vcs _rootdir <<<$(
            while test "$PWD" != "/"; do
                test -e ".hg" && echo "hg $PWD" && break
                test -e ".git" && echo "git $PWD" && break
                test -e ".citc" && echo "g4 $PWD" && break
                test -e ".p4config" && echo "g4 $PWD" && break
                cd ..
            done
        )
        echo "$_vcs $_rootdir" >.vcs_cache
    fi
    if test -z "$_vcs" || test -z "$_rootdir"; then
        return 1
    fi
    echo "$_vcs"
    test -n "$_vcs"
}

cv() {
    find . -type f -name .vcs_cache -delete
}

rootdir() {
    if ! test -f .vcs_cache; then
        vcs || return 1
    fi
    read _vcs _rootdir <.vcs_cache
    echo "$_rootdir"
    test -n "$_rootdir"
}

allknown() {
    local unknown="$(unknown)"
    echo "$unknown"
    test -z "$unknown"
}

# create version control functions to do the right thing based on vcs "$PWD"
# TODO: fork merge, etc.
alias ad=add
alias ak=allknown
alias am=amend
alias ch=check
alias cl=changelog
alias di=diffs
alias projectroot=rootdir
alias re=review
alias ro=rootdir
alias sa=save
alias st=status
for command in add amend branch branches \
    changed changelog changes commit diffs \
    fix incoming lint outgoing pending precommit prepush pull \
    push review status unknown; do
    # remove any alias created in .shrc
    case "$(type "$command" 2>/dev/null)" in *alias*)
        unalias "$command"
        ;;
    esac
    # create the function
    eval "$command"'() {
    local vcs="$(vcs "$PWD")"
    if test -n "$vcs"; then
        "${vcs}_'"$command"'" "$@"
    fi
    }'
done

check() {
    save && prereview
}

project() {
    basename "$(projectroot)"
}

save() {
    allknown && fix
}

submit() {
    # TODO: set up hooks to ensure push runs prepush/presubmit
    check && pull && presubmit && push
}

for f in "$HOME"/.shrc.vcs.*; do
    if ! test -f "$f"; then
        echo "$f is not readable"
        continue
    fi
    source "$f"
done
