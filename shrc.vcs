#!/bin/bash
# Version control additions to .shrc.

# Cache of version control system used by a given directory.
declare -A vcs
declare -A rootdir

# print the name of the version control system in use in $PWD
# TODO: implement in terms of rootdir
vcs() {
    if test $# -gt 0; then
        local vcs="$(vcs)"
        test -z "$vcs" && return 1
        local command=$1
        shift
        "${vcs}_${command}" "$@"
        return
    fi

    # If it's not writable, assume we don't care about vcs here.
    test -w "$PWD" || return 1

    local _vcs _rootdir
    if test -f .vcs_cache; then
        read _vcs _rootdir <.vcs_cache
    else
        read _vcs _rootdir <<<$(
            while test "$PWD" != "/"; do
                test -e ".hg" && echo "hg $PWD" && break
                test -e ".git" && echo "git $PWD" && break
                test -e ".citc" && echo "g4 $PWD" && break
                test -e ".p4config" && echo "g4 $PWD" && break
                cd ..
            done
        )
        echo "$_vcs $_rootdir" >.vcs_cache
    fi
    if test -z "$_vcs" || test -z "$_rootdir"; then
        return 1
    fi
    echo "$_vcs"
    test -n "$_vcs"
}

cv() {
    find . -type f -name .vcs_cache -delete
}

rootdir() {
    if ! test -f .vcs_cache; then
        vcs || return 1
    fi
    read _vcs _rootdir <.vcs_cache
    echo "$_rootdir"
    test -n "$_rootdir"
}

allknown() {
    local unknown="$(unknown)"
    echo "$unknown"
    test -z "$unknown"
}

# create version control functions to do the right thing based on vcs "$PWD"
# TODO: fork merge, etc.
alias ad=add
alias ak=allknown
alias am=amend
alias an=annotate
alias ann=annotate
alias bl=blame
alias change=recommit
alias ci=commit
alias cl=changelog
alias co=checkout
alias di=diffs
alias gr=graph
alias lg=graph
alias ma=review
alias pr=presubmit
alias projectroot=rootdir
alias re=review
alias ro=rootdir
alias sa=save
alias st=status
alias up=upload
upp() {
  upload
  presubmit
}
for command in add amend annotate \
    blame branch branches \
    changed changelog changes checkout commit commitforce diffs \
    fix graft graph incoming lint outgoing \
    pending pick precommit presubmit pull push \
    recommit revert review reword \
    status submit submitforce \
    unamend unknown upload uploadchain; do
    # remove any alias created in .shrc
    case "$(type "$command" 2>/dev/null)" in *alias*)
        unalias "$command"
        ;;
    esac
    # create the function
    eval "$command"'() {
        vcs '"$command"' "$@"
    }'
done

clone() {
    case "$1" in
      *.git) git clone "$@";;
      */hg*) hg clone "$@";;
    esac
}

project() {
    basename "$(projectroot)"
}

save() {
    allknown && fix
}

status_chars() (
    status | awk '!/^[[:space:]]{2}/ { print $1 }' | sort | uniq | tr '\n' ' ' | sed -e 's/ *$//'
)

for f in "$HOME"/.shrc.vcs.*; do
    if ! test -f "$f"; then
        echo "$f is not readable"
        continue
    fi
    source "$f"
done
