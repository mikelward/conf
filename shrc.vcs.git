# register git VCS
git_add() {
    git add --intent-to-add "$@"
}

git_amend() {
    test $# -eq 0 && set -- --all
    git amend --no-edit "$@"
}

git_annotate() {
    git blame "$@"
}

# print the name of the currently active git branch
git_branch() {
    git branch 2>/dev/null | while read star branch; do
        if test "$star" = "*"; then
            echo "$branch"
            break
        fi
    done
}

# print the name of all (local by default) git branches
git_branches() {
    git branch "$@"
}

git_changed() {
    git diff --name-only "$@"
}

git_changelog() {
    git log --oneline "$@"
}

git_changes() {
    git diff "$@"
}

git_commit() (
    declare -a flags
    for arg; do
        case "$arg" in
        --)
            flags+=("$arg")
            break
            ;;
        -*)
            flags+=("$arg")
            ;;
        *)
            break
            ;;
        esac
        shift
    done
    # no files given, commit them all
    test $# -eq 0 && flags+=("--all")
    git commit "${flags[@]}" "$@"
)

git_commitforce() {
    git_commit --no-verify "$@"
}

git_diffs() {
    git diff "$@"
}

git_fix() {
    git fix "$@"
}

git_graph() {
    git graph "$@"
}

# print commits that would be pulled
git_incoming() {
    git log --oneline HEAD..@{upstream}
}

git_lint() {
    git lint "$@"
}

# print commits that would be pushed
git_outgoing() {
    git log --oneline @{push}..HEAD
}

git_precommit() {
    git_hook pre-commit
}

git_prereview() {
    git_hook pre-commit
}

git_presubmit() {
    git_hook pre-push
}

git_projectroot() {
    git root
}

git_pull() {
    git pull --rebase "$@"
}

git_push() {
    git push "$@"
}

git_hook() {
    local script="$(git rev-parse --git-dir)/hooks/$1"
	shift
	if test -x "$script"; then
	    "$script" "$@"
	else
		echo "No $script hook" >&2
	fi
}

git_recommit() {
    git amend "$@"
}

git_revert() {
    git checkout -- "$@"
}

# send the current change for Gerrit review
git_review() {
    git push origin HEAD:refs/for/master/$(git_branch)${1+%r=$1}
}

git_reword() {
    git commit --amend --only --allow-empty
}

git_rootdir() {
    git rootdir
}

git_status() {
    git status --short --untracked-files=all "$@"
}

git_submit() {
    git push "$@"
}

git_submitforce() {
    git push --no-verify "$@"
}

git_unknown() (
    cd $(git rootdir)
    git ls-files -od --exclude-standard
)

# send the current change for Gerrit review
git_upload() {
    git push origin HEAD:refs/for/master/$(git_branch)${1+%r=$1}
}

# send the current change for Gerrit review
git_uploadchain() {
    git push origin HEAD:refs/for/master/$(git_branch)${1+%r=$1}
}
